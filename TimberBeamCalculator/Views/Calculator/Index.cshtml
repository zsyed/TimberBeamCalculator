    @model TimberBeamCalculator.Models.Dimensions

@{
    ViewBag.Title = "Index";
}

<h2>Calculator goes here.</h2>


        @using (Html.BeginForm()) {
        
            
            
        <script>
            $(document).ready(function () {
                //$("#divDurationOfLoadK3").hide();
            });
        </script> 
            
            

        
        <p>Beam span length =  @(Html.Kendo().NumericTextBoxFor(x => x.BeamSpanLength)
            .Name("BeamSpanLength")
            .Format("#.00 meters")
            .Min(00.00)
            .Value(1.00)
            .Spinners(false)
            )
        </p>

                
        <p>Width of Timber Beam =  @(Html.Kendo().NumericTextBoxFor(x => x.WidthOfTimberBeam)
            .Name("WidthOfTimberBeam")
            .Format("#.00 millimeters")
            .Min(00.00)
            .Value(1.00)
            .Spinners(false)
            )
        </p>
        <p>Depth of Timber Beam =  @(Html.Kendo().NumericTextBoxFor(x => x.DepthOfTimberBeam)
            .Name("DepthOfTimberBeam")
            .Format("#.00 millimeters")
            .Min(72.00)
            .Max(300.00)
            .Value(72)
            .Spinners(false)
        ) (72 mm minimum - 300 mm maximum)
        </p>
        <p>Timber Grade =  @(Html.Kendo().AutoCompleteFor(x => x.TimberGrade)
            .Name("TimberGrade")
            .Value("C16")
        ) 
        </p>
        <p>
            <div id="DivTimberGradeGrid">
                @(Html.Kendo().Grid<TimberBeamCalculator.Models.TimberGrades>()
                    .Name("TimberGradeGrid")
                    .DataSource(ds => ds
                                    .Ajax()
                                    .Read(r => r.Action("TimberData_Read", "Calculator"))   
                    )
                    .Columns(c=> 
                            {
                                c.Bound(t => t.TimberGrade);
                                c.Bound(t => t.BendingParallelToGrain);
                            }
                    )
                )

             
            </div>
        </p>
        
        <p>Load Includes roof loading user = 
            @(Html.Kendo().DropDownListFor(x => x.LoadIncludesRoofLoadingUse)
            .Name("LoadIncludesRoofLoadingUse")
            .DataTextField("Text")
            .DataValueField("Value")
            .BindTo(new List<SelectListItem>()
            {
                new SelectListItem() {
                    Text = "No", Value = "False"  
                },
                new SelectListItem() {
                    Text = "Yes", Value = "True"  
                }
            })
            .Events(e => e.Select("OnSelectLoadIncludesRoofLoadingUse"))
                )

            <div id="divDurationOfLoadK3">
                Duration of load =  @(Html.Kendo().NumericTextBoxFor(x => x.DurationOfLoadK3)
                                        .Name("DurationOfLoadK3")
                                        .Format("#.00")
                                        .Min(00.00)
                                        .Spinners(false)
                                        .Value(1.00)
                                    )
                
            </div>
    
            </p>
        <script>
            function OnSelectLoadIncludesRoofLoadingUse(e) {
                var dataItem = this.dataItem(e.item.index());
                if (dataItem.Value == "True") {
                   
                    $("#DurationOfLoadK3").kendoNumericTextBox({
                        value: 1.25,
                        spinners: false
                    });
                }
                else {
                    $("#DurationOfLoadK3").kendoNumericTextBox({
                        value: 1.00,
                        spinners: false
                    });
                }
            }

        </script>
            
            @Html.Kendo().Button().Name("setting").Icon("pencil").HtmlAttributes(new { type = "submit" }).Content("Run Calculation");
                

        }

