@model TimberBeamCalculator.Models.Dimensions
@{
    ViewBag.Title = "Index";
}

<h2>Calculator goes here.</h2>
        @using (Html.BeginForm()) {
            
        <script>
            $(document).ready(function () {
                $("#TimberGradeGrid").hide();
            });
        </script> 
        
        <p>Beam span length =  @(Html.Kendo().NumericTextBoxFor(x => x.BeamSpanLength)
            .Name("BeamSpanLength")
            .Format("#.00 meters")
            .Min(00.00)
            .Value(1.00)
            .Spinners(false)
            )
        </p>

                
        <p>Width of Timber Beam =  @(Html.Kendo().NumericTextBoxFor(x => x.WidthOfTimberBeam)
            .Name("WidthOfTimberBeam")
            .Format("#.00 millimeters")
            .Min(00.00)
            .Value(1.00)
            .Spinners(false)
            )
        </p>
        <p>Depth of Timber Beam =  @(Html.Kendo().NumericTextBoxFor(x => x.DepthOfTimberBeam)
            .Name("DepthOfTimberBeam")
            .Format("#.00 millimeters")
            .Min(72.00)
            .Max(300.00)
            .Value(72)
            .Spinners(false)
        ) (72 mm minimum - 300 mm maximum)
        </p>
            
           
            
        <p>Timber Grade =  @(Html.Kendo().AutoCompleteFor(x => x.TimberGrade)
            .Name("TimberGrade")
            .Value("C16")
        ) 
             @(Html.Kendo().Button()
                .Name("TimberGradeButtonShow")
                .Content("Show Chart")
                .HtmlAttributes( new {type = "button"} )
                )
                         @(Html.Kendo().Button()
                .Name("TimberGradeButtonHide")
                .Content("Hide Chart")
                .HtmlAttributes( new {type = "button"} )
                )
        </p>
            
        <p>
            <div id="DivTimberGradeGrid">
                @(Html.Kendo().Grid<TimberBeamCalculator.Models.TimberGrades>()
                    .Name("TimberGradeGrid")
                    .DataSource(ds => ds
                                    .Ajax()
                                    .Read(r => r.Action("TimberData_Read", "Calculator"))   
                    )
                    .Columns(c=> 
                            {
                                c.Bound(t => t.TimberGrade).HeaderHtmlAttributes(new { @class = "vertical-text" });
                                c.Bound(t => t.BendingParallelToGrain).HeaderHtmlAttributes(new { @class = "vertical-text" });
                                c.Bound(t => t.CompPerpendicularToGrain).HeaderHtmlAttributes(new { @class = "vertical-text" });
                                c.Bound(t => t.ShearParallelToGrain).HeaderHtmlAttributes(new { @class = "vertical-text" });
                                c.Bound(t => t.ModulusOfElasticityMean).HeaderHtmlAttributes(new { @class = "vertical-text" });
                                c.Bound(t => t.ModulusOfElasticityMin).HeaderHtmlAttributes(new { @class = "vertical-text" });
                                c.Bound(t => t.SoftWood).HeaderHtmlAttributes(new { @class = "vertical-text" });
                            }
                    )
                    .Selectable(s => s.Mode(GridSelectionMode.Single))
                    .Events(e => e.Change("OnChangeDivTimberGradeGrid"))
                )

             
            </div>
        </p>
        
        <p>Load Includes roof loading user = 
            @(Html.Kendo().DropDownListFor(x => x.LoadIncludesRoofLoadingUse)
            .Name("LoadIncludesRoofLoadingUse")
            .DataTextField("Text")
            .DataValueField("Value")
            .BindTo(new List<SelectListItem>()
            {
                new SelectListItem() {
                    Text = "No", Value = "False"  
                },
                new SelectListItem() {
                    Text = "Yes", Value = "True"  
                }
            })
            .Events(e => e.Select("OnSelectLoadIncludesRoofLoadingUse"))
                )

            <div id="divDurationOfLoadK3">
                Duration of load =  @(Html.Kendo().NumericTextBoxFor(x => x.DurationOfLoadK3)
                                        .Name("DurationOfLoadK3")
                                        .Format("#.00")
                                        .Min(00.00)
                                        .Spinners(false)
                                        .Value(1.00)
                                    )
                
            </div>
    
            </p>
        <script>
            function OnSelectLoadIncludesRoofLoadingUse(e) {
                var dataItem = this.dataItem(e.item.index());
                if (dataItem.Value == "True") {
                   
                    $("#DurationOfLoadK3").kendoNumericTextBox({
                        value: 1.25,
                        spinners: false
                    });
                }
                else {
                    $("#DurationOfLoadK3").kendoNumericTextBox({
                        value: 1.00,
                        spinners: false
                    });
                }
            }

            function OnChangeDivTimberGradeGrid(arg) {
                var selected = $.map(this.select(), function (item) {
                    var grade = $(item).text().substring(0, 3);
                    $("#TimberGrade").val(grade);
                });
            }

            $("#TimberGradeButtonShow").mousedown(function () {
                $("#TimberGradeGrid").show();
            });

            $("#TimberGradeButtonHide").mousedown(function () {
                $("#TimberGradeGrid").hide();
            });

        </script>
            
        @Html.Kendo().Button().Name("RunCalculationButton").Icon("pencil").HtmlAttributes(new { type = "submit" }).Content("Run Calculation")

        }

<style scoped="scoped">
.vertical-text
{
    writing-mode:tb-rl;
    height:200px;
    width:10px;
}

</style>


