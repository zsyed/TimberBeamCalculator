@model TimberBeamCalculator.Models.Dimensions
@{
    ViewBag.Title = "Index";
}

<h2>Calculator goes here.</h2>
        @using (Html.BeginForm()) {
            
        <script>
            $(document).ready(function () {
                $("#spanPiecesRoofLoading").hide();
                $("#TimberGradeGrid").hide();
                $("#DivUniformlyDistributedLoad").hide();
                $("#TimberGrade").width(50);
                $("#BeamCompriseOfTwoOrMorePiecesConnectedTogetherInParallel").width(60);
                $("#PieceCountModulusOfElasticity").width(100);
                $("#LoadDetailsDropDownList").width(550);
            });
        </script> 
        
        <p>Beam span length =  @(Html.Kendo().NumericTextBoxFor(x => x.BeamSpanLength)
            .Name("BeamSpanLength")
            .Format("#.00 metres")
            .Min(00.00)
            .Value(1.00)
            .Spinners(false)
            )
        </p>

                
        <p>Width of Timber Beam =  @(Html.Kendo().NumericTextBoxFor(x => x.WidthOfTimberBeam)
            .Name("WidthOfTimberBeam")
            .Format("# millimetres")
            .Decimals(0)
            .Min(0)
            .Value(47)
            .Step(1)
            .Spinners(false)
            )
        </p>
        <p>Depth of Timber Beam =  @(Html.Kendo().NumericTextBoxFor(x => x.DepthOfTimberBeam)
            .Name("DepthOfTimberBeam")
            .Format("# millimetres")
            .Decimals(0)
            .Min(72)
            .Max(300)
            .Value(195)
            .Step(1)
            .Spinners(false)
        ) (72 mm minimum - 300 mm maximum)
        </p>
            
        <p>
            @(Html.Kendo().Button()
                .Name("UniformlyDistributedLoad")
                .Content("Uniformly Distributed Load")
                .HtmlAttributes( new {type = "button"} )
            )

            @(Html.Kendo().Button()
                .Name("PartialUniformlyDistributedLoad")
                .Content("Partial Uniformly Distributed Load")
                .HtmlAttributes( new {type = "button"} )
            )

            @(Html.Kendo().Button()
                .Name("PointLoad")
                .Content("Point Load")
                .HtmlAttributes( new {type = "button"} )
            )

        </p>
            
        <p>
            <div id="DivUniformlyDistributedLoad" style="width:750px;height:150px;border:2px solid #000;">
                <p>
                @(Html.Kendo().DropDownListFor(x => x.LoadDetailsDropDownList)
                    .Name("LoadDetailsDropDownList")
                    .DataTextField("LoadingDetailText")
                    .DataValueField("LoadingDetailValue")
                    .DataSource(s =>
                                    {
                                        s.Read(r =>
                                                    {
                                                        r.Action("GetLoadDetails", "Calculator");
                                                    }
                                        );
                                    }

                                )

                )
                    </p>
                Permanent Load =  @(Html.Kendo().NumericTextBoxFor(x => x.BeamSpanLength)
                .Name("PermanentLoad")
                .Format("#.00 kN/m2")
                .Min(00.00)
                .Value(1.00)
                .Spinners(false)
                )

                Variable Load =  @(Html.Kendo().NumericTextBoxFor(x => x.BeamSpanLength)
                .Name("VariableLoad")
                .Format("#.00 kN/m2")
                .Min(00.00)
                .Value(1.00)
                .Spinners(false)
                )

                <p>
                Width of load perpendicular to beam, or height of load supported by beam =  @(Html.Kendo().NumericTextBoxFor(x => x.BeamSpanLength)
                .Name("LoadPerpendicular")
                .Format("#.00 metres")
                .Min(00.00)
                .Value(1.00)
                .Spinners(false)
                )
                </p>
            </div>
        </p>
           
            
        <p>Timber Grade =  @(Html.Kendo().AutoCompleteFor(x => x.TimberGrade)
            .Name("TimberGrade")
            .Value("C16")
            
        ) 
             @(Html.Kendo().Button()
                .Name("TimberGradeButtonShow")
                .Content("Show Chart")
                .HtmlAttributes( new {type = "button"} )
                )
                         @(Html.Kendo().Button()
                .Name("TimberGradeButtonHide")
                .Content("Hide Chart")
                .HtmlAttributes( new {type = "button"} )
                )
        </p>
            
        <p>
            <div id="DivTimberGradeGrid">
                @(Html.Kendo().Grid<TimberBeamCalculator.Models.TimberGrades>()
                    .Name("TimberGradeGrid")
                    .DataSource(ds => ds
                                    .Ajax()
                                    .Read(r => r.Action("TimberData_Read", "Calculator"))   
                    )
                    .Columns(c=> 
                            {
                                c.Bound(t => t.TimberGrade).HeaderHtmlAttributes(new { @class = "vertical-text" });
                                c.Bound(t => t.BendingParallelToGrain).HeaderHtmlAttributes(new { @class = "vertical-text" });
                                c.Bound(t => t.CompPerpendicularToGrain).HeaderHtmlAttributes(new { @class = "vertical-text" });
                                c.Bound(t => t.ShearParallelToGrain).HeaderHtmlAttributes(new { @class = "vertical-text" });
                                c.Bound(t => t.ModulusOfElasticityMean).HeaderHtmlAttributes(new { @class = "vertical-text" });
                                c.Bound(t => t.ModulusOfElasticityMin).HeaderHtmlAttributes(new { @class = "vertical-text" });
                                c.Bound(t => t.TypeOfWood).HeaderHtmlAttributes(new { @class = "vertical-text" });
                            }
                    )
                    .Selectable(s => s.Mode(GridSelectionMode.Single))
                    .Events(e => e.Change("OnChangeDivTimberGradeGrid"))
                )

             
            </div>
        </p>
        
        <p>Does the loading include roof loading = 
            @(Html.Kendo().DropDownListFor(x => x.BeamCompriseOfTwoOrMorePiecesConnectedTogetherInParallel)
                .Name("BeamCompriseOfTwoOrMorePiecesConnectedTogetherInParallel")
                .DataTextField("Text")
                .DataValueField("Value")
                .BindTo(new List<SelectListItem>()
                    {
                        new SelectListItem() {
                            Text = "No", Value = "false" 
                        },
                        new SelectListItem() {
                            Text = "Yes", Value = "true"
                        }
                    }
                )
                .Events( e => e.Change("OnChangeBeamCompriseOfTwoOrMorePiecesConnectedTogetherInParallel"))
            )
            
            <span id="spanPiecesRoofLoading">
            How many pieces?
  
            @(Html.Kendo().DropDownListFor(x => x.PieceCountModulusOfElasticity)
                .Name("PieceCountModulusOfElasticity")
                .DataTextField("Text")
                .DataValueField("Value")
                .BindTo(new List<SelectListItem>()
                {
                    new SelectListItem() {
                        Text = "1 Piece", Value = "1" 
                    },
                    new SelectListItem() {
                        Text = "2 Pieces", Value = "TwoPieces"  
                    },
                    new SelectListItem() {
                        Text = "3 Pieces", Value = "ThreePieces"  
                    },
                    new SelectListItem() {
                        Text = "4+ Pieces", Value = "FourPlusPieces"  
                    }
                    
                })
            )
                  </span>
            </p>
            
            
<script>

    function OnChangeBeamCompriseOfTwoOrMorePiecesConnectedTogetherInParallel() {
        var resp = $("#BeamCompriseOfTwoOrMorePiecesConnectedTogetherInParallel").val();
        if (resp == "true") {
            $("#spanPiecesRoofLoading").show();
        }
        else {
            $("#spanPiecesRoofLoading").hide();
        }

    }

    function OnChangeDivTimberGradeGrid(arg) {
        var selected = $.map(this.select(), function (item) {
            var grade = $(item).text().substring(0, 3);
            $("#TimberGrade").val(grade);
        });
    }

    $("#TimberGradeButtonShow").mousedown(function () {
        $("#TimberGradeGrid").show();
    });

    $("#TimberGradeButtonHide").mousedown(function () {
        $("#TimberGradeGrid").hide();
    });

    $("#UniformlyDistributedLoad").mousedown(function () {
        $("#DivUniformlyDistributedLoad").show();
    });

        </script>
            
        @Html.Kendo().Button().Name("RunCalculationButton").Icon("pencil").HtmlAttributes(new { type = "submit" }).Content("Run Calculation")

        }

<style scoped="scoped">
.vertical-text
{
    writing-mode:tb-rl;
    height:200px;
    width:10px;
}

</style>


